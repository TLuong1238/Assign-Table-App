// services/vnpayRefundService.js - T·∫†O FILE M·ªöI
import { supabase } from '../lib/supabase';
import { VNPAY_CONFIG } from '../constants/vnpayConfig';

export const VNPayRefundService = {
    // ‚úÖ SIMULATE HO√ÄN TI·ªÄN (DEMO)
    simulateRefund: async (refundData) => {
        try {
            console.log('üîÑ Simulating VNPay refund:', refundData);

            const {
                billId,
                originalAmount,
                refundAmount,
                refundReason,
                userId,
                transactionNo
            } = refundData;

            // ‚úÖ VALIDATE REFUND DATA
            if (!billId || !originalAmount || !refundAmount || !userId) {
                throw new Error('Missing required refund data');
            }

            if (refundAmount > originalAmount) {
                throw new Error('Refund amount cannot exceed original amount');
            }

            // ‚úÖ GENERATE REFUND TRANSACTION
            const refundTxnRef = `REFUND_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            const refundOrderInfo = `Hoan tien don hang ${billId} - ${refundReason}`;

            // ‚úÖ SIMULATE VNPAY REFUND RESPONSE (DEMO)
            const simulatedResponse = {
                vnp_ResponseCode: '00', // Success
                vnp_TransactionStatus: '00', // Success
                vnp_TxnRef: refundTxnRef,
                vnp_Amount: refundAmount * 100, // VNPay uses cents
                vnp_OrderInfo: refundOrderInfo,
                vnp_TransactionNo: `RF${Date.now()}`,
                vnp_BankCode: 'DEMO',
                vnp_PayDate: new Date().toISOString().replace(/[-T:]/g, '').slice(0, 14),
                vnp_RefundAmount: refundAmount * 100,
                vnp_RefundTransactionNo: `RF${Date.now()}`,
                vnp_Message: 'Giao dich hoan tien thanh cong',
                isSuccess: true,
                isDemoRefund: true
            };

            console.log('‚úÖ Simulated refund response:', simulatedResponse);

            // ‚úÖ SAVE REFUND TO DATABASE
            const { data: refundRecord, error: refundError } = await supabase
                .from('refunds')
                .insert([
                    {
                        bill_id: billId,
                        user_id: userId,
                        original_amount: originalAmount,
                        refund_amount: refundAmount,
                        refund_reason: refundReason,
                        original_transaction_no: transactionNo,
                        refund_transaction_no: simulatedResponse.vnp_RefundTransactionNo,
                        vnp_response_code: simulatedResponse.vnp_ResponseCode,
                        vnp_transaction_status: simulatedResponse.vnp_TransactionStatus,
                        status: 'completed',
                        refund_method: 'vnpay_demo',
                        refund_data: simulatedResponse,
                        created_at: new Date().toISOString(),
                        completed_at: new Date().toISOString()
                    }
                ])
                .select()
                .single();

            if (refundError) {
                console.error('‚ùå Error saving refund:', refundError);
                throw new Error('Failed to save refund record');
            }

            console.log('‚úÖ Refund saved:', refundRecord);

            // ‚úÖ UPDATE BILL STATUS
            const { error: billUpdateError } = await supabase
                .from('bills')
                .update({
                    state: 'cancelled',
                    visit: 'un_visited',
                    refund_amount: refundAmount,
                    refund_status: 'completed',
                    updated_at: new Date().toISOString()
                })
                .eq('id', billId);

            if (billUpdateError) {
                console.error('‚ùå Error updating bill:', billUpdateError);
                throw new Error('Failed to update bill status');
            }

            return {
                success: true,
                data: {
                    refund: refundRecord,
                    vnpayResponse: simulatedResponse,
                    message: 'Ho√†n ti·ªÅn th√†nh c√¥ng (Demo)'
                }
            };

        } catch (error) {
            console.error('‚ùå Refund simulation error:', error);
            return {
                success: false,
                message: error.message
            };
        }
    },

    // ‚úÖ GET REFUND HISTORY
    getRefundHistory: async (userId, billId = null) => {
        try {
            let query = supabase
                .from('refunds')
                .select(`
          *,
          bills (
            id,
            name,
            phone,
            time,
            total_amount
          )
        `)
                .eq('user_id', userId)
                .order('created_at', { ascending: false });

            if (billId) {
                query = query.eq('bill_id', billId);
            }

            const { data, error } = await query;

            if (error) {
                throw new Error(error.message);
            }

            return {
                success: true,
                data: data || []
            };

        } catch (error) {
            console.error('‚ùå Get refund history error:', error);
            return {
                success: false,
                message: error.message
            };
        }
    },

    // ‚úÖ VALIDATE REFUND ELIGIBILITY
    validateRefundEligibility: async (billId) => {
        try {
            const { data: bill, error } = await supabase
                .from('bills')
                .select('*')
                .eq('id', billId)
                .single();

            if (error) {
                throw new Error('Bill not found');
            }

            // ‚úÖ CHECK REFUND CONDITIONS
            const conditions = {
                canRefund: false,
                reasons: [],
                maxRefundAmount: 0,
                refundDeadline: null
            };

            // ‚úÖ CHECK IF ALREADY REFUNDED
            if (bill.state === 'refunded') {
                conditions.reasons.push('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn');
                return { success: true, data: conditions };
            }

            // ‚úÖ CHECK IF CANCELLED
            if (bill.state === 'cancelled') {
                conditions.reasons.push('ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy');
                return { success: true, data: conditions };
            }

            // ‚úÖ CHECK PAYMENT STATUS
            if (bill.payment_status !== 'deposit_paid' && bill.payment_status !== 'fully_paid') {
                conditions.reasons.push('Ch∆∞a thanh to√°n ƒë·ªÉ c√≥ th·ªÉ ho√†n ti·ªÅn');
                return { success: true, data: conditions };
            }

            // ‚úÖ KI·ªÇM TRA PH∆Ø∆†NG TH·ª®C THANH TO√ÅN - CH·ªà ONLINE M·ªöI HO√ÄN
            if (bill.payment_method === 'counter' || bill.payment_method === 'cash') {
                conditions.reasons.push('Thanh to√°n t·∫°i qu·∫ßy/ti·ªÅn m·∫∑t kh√¥ng th·ªÉ ho√†n ti·ªÅn online');
                return { success: true, data: conditions };
            }

            // ‚úÖ CH·ªà CHO PH√âP HO√ÄN TI·ªÄN VNPAY
            if (bill.payment_method !== 'vnpay') {
                conditions.reasons.push('Ch·ªâ h·ªó tr·ª£ ho√†n ti·ªÅn cho thanh to√°n VNPay');
                return { success: true, data: conditions };
            }

            // ‚úÖ CHECK TIME CONSTRAINTS
            const billTime = new Date(bill.time);
            const now = new Date();
            const diffHours = (billTime.getTime() - now.getTime()) / (1000 * 60 * 60); // ‚úÖ ƒê·∫¢O NG∆Ø·ª¢C: billTime - now

            // ‚úÖ LOGIC HO√ÄN TI·ªÄN THEO TH·ªúI GIAN M·ªöI
            if (diffHours < 2) {
                conditions.reasons.push('Kh√¥ng ƒë∆∞·ª£c h·ªßy/ho√†n ti·ªÅn khi c√≤n √≠t h∆°n 2 gi·ªù ƒë·∫øn th·ªùi gian ƒë·∫∑t');
                return { success: true, data: conditions };
            }

            if (diffHours < 24) {
                conditions.reasons.push('Kh√¥ng ƒë∆∞·ª£c ho√†n ti·ªÅn khi c√≤n √≠t h∆°n 24 gi·ªù ƒë·∫øn th·ªùi gian ƒë·∫∑t');
                return { success: true, data: conditions };
            }
            // ‚úÖ DETERMINE REFUND AMOUNT
            let maxRefundAmount = 0;
            if (bill.payment_status === 'deposit_paid') {
                maxRefundAmount = bill.deposit_amount || 0;
            } else if (bill.payment_status === 'fully_paid') {
                maxRefundAmount = bill.total_amount || 0;
            }

            // ‚úÖ CALCULATE REFUND DEADLINE
            const refundDeadline = new Date(billTime.getTime() + 24 * 60 * 60 * 1000);

            conditions.canRefund = true;
            conditions.maxRefundAmount = maxRefundAmount;
            conditions.refundDeadline = refundDeadline;

            return {
                success: true,
                data: conditions
            };

        } catch (error) {
            console.error('‚ùå Validate refund eligibility error:', error);
            return {
                success: false,
                message: error.message
            };
        }
    }
};