import React, { useState } from 'react';
import {
  View,
  Text,
  Modal,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Linking,
  ScrollView,
  // ‚ùå X√≥a Image n·∫øu kh√¥ng d√πng
} from 'react-native';
import { theme } from '../constants/theme';
import { hp, wp } from '../helper/common';
import MyLoading from './MyLoading';
import { createPaymentUrl } from '../services/paymentService';
import * as Icon from 'react-native-feather';

const DemoPaymentModal = ({ 
  visible, 
  onClose, 
  billData,
  onPaymentSuccess,
  onPaymentFailure 
}) => {
  const [loading, setLoading] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('vnpay');
  const [step, setStep] = useState(1); // 1: Info, 2: Processing, 3: Result

  const handlePayment = async () => {
    if (!billData) return;

    setLoading(true);
    setStep(2);
    
    try {
      // ‚úÖ T·∫°o payment data
      const paymentData = {
        userId: billData.userId || 'demo_user',
        billId: billData.id,
        amount: billData.price || 100000,
        description: `Thanh to√°n ƒë∆°n ƒë·∫∑t b√†n #${billData.id} - ${billData.name}`,
        orderType: 'billpayment'
      };

      console.log('üîÑ Creating payment with data:', paymentData);

      // ‚úÖ Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      // ‚úÖ T·∫°o payment URL
      const result = await createPaymentUrl(paymentData);
      
      if (result.success) {
        console.log('‚úÖ Payment URL created successfully');
        console.log('üîó Payment URL:', result.data.paymentUrl);
        console.log('üìù Order ID:', result.data.orderId);
        
        setLoading(false);
        
        // ‚úÖ Hi·ªÉn th·ªã demo options
        showPaymentOptions(result.data);
        
      } else {
        throw new Error(result.message || 'Kh√¥ng th·ªÉ t·∫°o thanh to√°n');
      }
      
    } catch (error) {
      console.error('‚ùå Payment error:', error);
      setLoading(false);
      setStep(1);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra: ' + error.message);
    }
  };

  const showPaymentOptions = (paymentData) => {
    Alert.alert(
      'üéâ T·∫°o thanh to√°n th√†nh c√¥ng!',
      `M√£ giao d·ªãch: ${paymentData.orderId}\n\nTrong th·ª±c t·∫ø, b·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn VNPay. Ch·ªçn k·∫øt qu·∫£ demo:`,
      [
        {
          text: 'H·ªßy',
          style: 'cancel',
          onPress: () => {
            setStep(1);
          }
        },
        {
          text: 'üåê Xem URL VNPay',
          onPress: () => {
            setStep(1);
            Alert.alert(
              'üîó VNPay Payment URL',
              'URL thanh to√°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\n\nTrong production, URL n√†y s·∫Ω redirect user ƒë·∫øn trang VNPay.',
              [
                {
                  text: 'Copy URL',
                  onPress: () => {
                    console.log('üìã VNPay URL copied:', paymentData.paymentUrl);
                    Alert.alert('‚úÖ', 'URL ƒë√£ ƒë∆∞·ª£c log ra console');
                  }
                },
                { text: 'OK' }
              ]
            );
          }
        },
        {
          text: '‚úÖ Demo Th√†nh c√¥ng',
          onPress: () => simulateSuccess(paymentData)
        },
        {
          text: '‚ùå Demo Th·∫•t b·∫°i',
          onPress: () => simulateFailure(paymentData)
        }
      ]
    );
  };

  const simulateSuccess = (paymentData) => {
    setStep(3);
    
    setTimeout(() => {
      Alert.alert(
        'üéâ Thanh to√°n th√†nh c√¥ng!',
        `Giao d·ªãch ${paymentData.orderId} ƒë√£ ho√†n t·∫•t.\n\nS·ªë ti·ªÅn: ${billData.price?.toLocaleString('vi-VN') || '100,000'}ƒë\nPh∆∞∆°ng th·ª©c: VNPay\nTr·∫°ng th√°i: Th√†nh c√¥ng`,
        [
          {
            text: 'Xem l·ªãch s·ª≠',
            onPress: () => {
              onClose();
              onPaymentSuccess?.(paymentData);
              console.log('‚úÖ Navigate to payment history');
            }
          },
          {
            text: 'V·ªÅ trang ch·ªß',
            onPress: () => {
              onClose();
              onPaymentSuccess?.(paymentData);
              console.log('‚úÖ Navigate to home');
            }
          }
        ]
      );
    }, 1500);
  };

  const simulateFailure = (paymentData) => {
    setStep(3);
    
    setTimeout(() => {
      const errorCodes = ['24', '51', '79', '11'];
      const randomCode = errorCodes[Math.floor(Math.random() * errorCodes.length)];
      
      Alert.alert(
        '‚ùå Thanh to√°n th·∫•t b·∫°i!',
        `Giao d·ªãch ${paymentData.orderId} kh√¥ng th√†nh c√¥ng.\n\nM√£ l·ªói: ${randomCode}\nL√Ω do: ${getErrorMessage(randomCode)}`,
        [
          {
            text: 'Th·ª≠ l·∫°i',
            onPress: () => {
              setStep(1);
              console.log('üîÑ Retry payment');
            }
          },
          {
            text: 'H·ªßy',
            onPress: () => {
              onClose();
              onPaymentFailure?.({ 
                orderId: paymentData.orderId, 
                errorCode: randomCode 
              });
            }
          }
        ]
      );
    }, 1500);
  };

  const getErrorMessage = (code) => {
    const messages = {
      '24': 'Kh√°ch h√†ng h·ªßy giao d·ªãch',
      '51': 'T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞',
      '79': 'Nh·∫≠p sai m·∫≠t kh·∫©u qu√° nhi·ªÅu l·∫ßn',
      '11': 'H·∫øt h·∫°n ch·ªù thanh to√°n'
    };
    return messages[code] || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
  };

  const renderPaymentInfo = () => (
    <ScrollView style={styles.scrollContainer}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>üí≥ Thanh to√°n ƒë∆°n ƒë·∫∑t b√†n</Text>
        <TouchableOpacity onPress={onClose} style={styles.closeButton}>
          <Icon.X width={24} height={24} color={theme.colors.dark} />
        </TouchableOpacity>
      </View>

      {/* Bill Information */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üìã Th√¥ng tin ƒë·∫∑t b√†n</Text>
        <View style={styles.billCard}>
          <View style={styles.infoRow}>
            <Text style={styles.label}>M√£ ƒë∆°n:</Text>
            <Text style={styles.value}>#{billData?.id}</Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.label}>Kh√°ch h√†ng:</Text>
            <Text style={styles.value}>{billData?.name}</Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i:</Text>
            <Text style={styles.value}>{billData?.phone}</Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.label}>S·ªë ng∆∞·ªùi:</Text>
            <Text style={styles.value}>{billData?.num_people} ng∆∞·ªùi</Text>
          </View>
          <View style={styles.infoRow}>
            <Text style={styles.label}>Th·ªùi gian:</Text>
            <Text style={styles.value}>
              {billData?.time ? new Date(billData.time).toLocaleString('vi-VN') : 'N/A'}
            </Text>
          </View>
        </View>
      </View>

      {/* Amount Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üí∞ Chi ti·∫øt thanh to√°n</Text>
        <View style={styles.amountCard}>
          <View style={styles.amountRow}>
            <Text style={styles.amountLabel}>Ph√≠ ƒë·∫∑t b√†n:</Text>
            <Text style={styles.amountValue}>
              {billData?.price ? `${billData.price.toLocaleString('vi-VN')}ƒë` : '100,000ƒë'}
            </Text>
          </View>
          <View style={styles.divider} />
          <View style={styles.totalRow}>
            <Text style={styles.totalLabel}>T·ªïng thanh to√°n:</Text>
            <Text style={styles.totalValue}>
              {billData?.price ? `${billData.price.toLocaleString('vi-VN')}ƒë` : '100,000ƒë'}
            </Text>
          </View>
        </View>
      </View>

      {/* Payment Method */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>üè¶ Ph∆∞∆°ng th·ª©c thanh to√°n</Text>
        
        <TouchableOpacity 
          style={[
            styles.paymentMethodCard,
            paymentMethod === 'vnpay' && styles.selectedMethod
          ]}
          onPress={() => setPaymentMethod('vnpay')}
        >
          <View style={styles.methodLeft}>
            <View style={styles.vnpayIcon}>
              <Text style={styles.vnpayIconText}>VNP</Text>
            </View>
            <View style={styles.methodInfo}>
              <Text style={styles.methodName}>VNPay</Text>
              <Text style={styles.methodDesc}>Internet Banking ‚Ä¢ V√≠ ƒëi·ªán t·ª≠ ‚Ä¢ Th·∫ª ATM</Text>
              <Text style={styles.methodNote}>H·ªó tr·ª£: Vietcombank, Techcombank, BIDV, VietinBank...</Text>
            </View>
          </View>
          <View style={styles.radioContainer}>
            <View style={styles.radioButton}>
              {paymentMethod === 'vnpay' && <View style={styles.radioSelected} />}
            </View>
          </View>
        </TouchableOpacity>

        {/* Other payment methods (disabled for demo) */}
        <TouchableOpacity style={[styles.paymentMethodCard, styles.disabledMethod]}>
          <View style={styles.methodLeft}>
            <View style={[styles.vnpayIcon, { backgroundColor: '#6c757d' }]}>
              <Icon.CreditCard width={20} height={20} color="white" />
            </View>
            <View style={styles.methodInfo}>
              <Text style={[styles.methodName, { color: '#6c757d' }]}>Th·∫ª t√≠n d·ª•ng</Text>
              <Text style={[styles.methodDesc, { color: '#6c757d' }]}>Visa ‚Ä¢ MasterCard ‚Ä¢ JCB</Text>
              <Text style={[styles.methodNote, { color: '#6c757d' }]}>S·∫Øp ra m·∫Øt</Text>
            </View>
          </View>
          <View style={[styles.radioButton, { borderColor: '#6c757d' }]} />
        </TouchableOpacity>
      </View>

      {/* Demo Notice */}
      <View style={styles.demoNotice}>
        <Icon.Info width={20} height={20} color="#856404" />
        <View style={styles.demoContent}>
          <Text style={styles.demoTitle}>‚ÑπÔ∏è Ch·∫ø ƒë·ªô Demo</Text>
          <Text style={styles.demoText}>
            ‚Ä¢ ƒê√¢y l√† m√¥i tr∆∞·ªùng demo, kh√¥ng th·ª±c hi·ªán giao d·ªãch th·∫≠t{'\n'}
            ‚Ä¢ B·∫°n c√≥ th·ªÉ test c·∫£ tr∆∞·ªùng h·ª£p th√†nh c√¥ng v√† th·∫•t b·∫°i{'\n'}
            ‚Ä¢ URL VNPay s·∫Ω ƒë∆∞·ª£c t·∫°o th·∫≠t nh∆∞ng kh√¥ng redirect{'\n'}
            ‚Ä¢ Trong production s·∫Ω chuy·ªÉn ƒë·∫øn trang VNPay
          </Text>
        </View>
      </View>

      {/* Security Info */}
      <View style={styles.securityInfo}>
        <Icon.Shield width={16} height={16} color="#28a745" />
        <Text style={styles.securityText}>
          Giao d·ªãch ƒë∆∞·ª£c b·∫£o m·∫≠t b·ªüi VNPay SSL 256-bit
        </Text>
      </View>
    </ScrollView>
  );

  const renderProcessing = () => (
    <View style={styles.processingContainer}>
      <View style={styles.processingCard}>
        <MyLoading size="large" />
        <Text style={styles.processingTitle}>ƒêang t·∫°o thanh to√°n...</Text>
        <Text style={styles.processingText}>
          Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t{'\n'}
          H·ªá th·ªëng ƒëang t·∫°o li√™n k·∫øt thanh to√°n VNPay
        </Text>
        
        <View style={styles.processingSteps}>
          <View style={styles.stepItem}>
            <Icon.CheckCircle width={16} height={16} color="#28a745" />
            <Text style={styles.stepText}>X√°c th·ª±c th√¥ng tin</Text>
          </View>
          <View style={styles.stepItem}>
            <MyLoading size="small" />
            <Text style={styles.stepText}>T·∫°o li√™n k·∫øt thanh to√°n</Text>
          </View>
          <View style={styles.stepItem}>
            <Icon.Clock width={16} height={16} color="#6c757d" />
            <Text style={[styles.stepText, { color: '#6c757d' }]}>Chuy·ªÉn h∆∞·ªõng VNPay</Text>
          </View>
        </View>
      </View>
    </View>
  );

  if (!billData) return null;

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.overlay}>
        <View style={styles.modalContainer}>
          {step === 1 && renderPaymentInfo()}
          {step === 2 && renderProcessing()}

          {/* Action Buttons */}
          {step === 1 && (
            <View style={styles.buttonContainer}>
              <TouchableOpacity 
                style={styles.cancelButton} 
                onPress={onClose}
                disabled={loading}
              >
                <Text style={styles.cancelButtonText}>H·ªßy</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={[styles.payButton, loading && styles.disabledButton]} 
                onPress={handlePayment}
                disabled={loading}
              >
                <Icon.CreditCard width={20} height={20} color="white" />
                <Text style={styles.payButtonText}>
                  Thanh to√°n {billData?.price ? `${billData.price.toLocaleString('vi-VN')}ƒë` : '100,000ƒë'}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContainer: {
    backgroundColor: 'white',
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
    maxHeight: hp(90),
    width: '100%',
  },
  scrollContainer: {
    maxHeight: hp(75),
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: wp(5),
    paddingBottom: wp(3),
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  title: {
    fontSize: hp(2.5),
    fontWeight: 'bold',
    color: theme.colors.dark,
  },
  closeButton: {
    padding: wp(2),
    borderRadius: 20,
    backgroundColor: '#f8f9fa',
  },
  section: {
    padding: wp(5),
    paddingTop: wp(3),
  },
  sectionTitle: {
    fontSize: hp(2),
    fontWeight: 'bold',
    color: theme.colors.dark,
    marginBottom: hp(1.5),
  },
  billCard: {
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    padding: wp(4),
    borderLeftWidth: 4,
    borderLeftColor: theme.colors.primary,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: hp(1),
  },
  label: {
    fontSize: hp(1.7),
    color: theme.colors.text,
    flex: 1,
  },
  value: {
    fontSize: hp(1.7),
    color: theme.colors.dark,
    fontWeight: '600',
    flex: 1.5,
    textAlign: 'right',
  },
  amountCard: {
    backgroundColor: '#e3f2fd',
    borderRadius: 12,
    padding: wp(4),
  },
  amountRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: hp(1),
  },
  amountLabel: {
    fontSize: hp(1.8),
    color: '#1565c0',
  },
  amountValue: {
    fontSize: hp(1.8),
    color: '#1565c0',
    fontWeight: '600',
  },
  divider: {
    height: 1,
    backgroundColor: '#bbdefb',
    marginVertical: hp(1),
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  totalLabel: {
    fontSize: hp(2),
    color: '#0d47a1',
    fontWeight: 'bold',
  },
  totalValue: {
    fontSize: hp(2.5),
    color: '#0d47a1',
    fontWeight: 'bold',
  },
  paymentMethodCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    padding: wp(4),
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#e9ecef',
    marginBottom: hp(1.5),
  },
  selectedMethod: {
    borderColor: '#007bff',
    backgroundColor: '#e3f2fd',
  },
  disabledMethod: {
    opacity: 0.5,
  },
  methodLeft: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  vnpayIcon: {
    width: 50,
    height: 50,
    backgroundColor: '#007bff',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: wp(3),
  },
  vnpayIconText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: hp(1.6),
  },
  methodInfo: {
    flex: 1,
  },
  methodName: {
    fontSize: hp(1.9),
    fontWeight: 'bold',
    color: theme.colors.dark,
  },
  methodDesc: {
    fontSize: hp(1.5),
    color: theme.colors.text,
    marginTop: hp(0.3),
  },
  methodNote: {
    fontSize: hp(1.3),
    color: theme.colors.textLight,
    marginTop: hp(0.2),
    fontStyle: 'italic',
  },
  radioContainer: {
    padding: wp(2),
  },
  radioButton: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#007bff',
    justifyContent: 'center',
    alignItems: 'center',
  },
  radioSelected: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#007bff',
  },
  demoNotice: {
    flexDirection: 'row',
    backgroundColor: '#fff3cd',
    margin: wp(5),
    marginTop: 0,
    padding: wp(4),
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#ffc107',
  },
  demoContent: {
    flex: 1,
    marginLeft: wp(3),
  },
  demoTitle: {
    fontSize: hp(1.7),
    fontWeight: 'bold',
    color: '#856404',
    marginBottom: hp(0.5),
  },
  demoText: {
    fontSize: hp(1.5),
    color: '#856404',
    lineHeight: hp(2.2),
  },
  securityInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: wp(3),
    marginHorizontal: wp(5),
    backgroundColor: '#d4edda',
    borderRadius: 8,
    marginBottom: hp(2),
  },
  securityText: {
    fontSize: hp(1.4),
    color: '#155724',
    marginLeft: wp(2),
    fontWeight: '500',
  },
  processingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: wp(5),
  },
  processingCard: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: wp(8),
    alignItems: 'center',
    width: '100%',
  },
  processingTitle: {
    fontSize: hp(2.2),
    fontWeight: 'bold',
    color: theme.colors.dark,
    marginTop: hp(2),
    marginBottom: hp(1),
  },
  processingText: {
    fontSize: hp(1.6),
    color: theme.colors.text,
    textAlign: 'center',
    lineHeight: hp(2.3),
    marginBottom: hp(3),
  },
  processingSteps: {
    width: '100%',
  },
  stepItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: hp(1.5),
    paddingHorizontal: wp(2),
  },
  stepText: {
    fontSize: hp(1.6),
    color: theme.colors.dark,
    marginLeft: wp(3),
  },
  buttonContainer: {
    flexDirection: 'row',
    padding: wp(5),
    paddingTop: wp(3),
    gap: wp(3),
    backgroundColor: 'white',
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#f8f9fa',
    paddingVertical: hp(1.8),
    borderRadius: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#dee2e6',
  },
  cancelButtonText: {
    color: '#6c757d',
    fontSize: hp(1.8),
    fontWeight: '600',
  },
  payButton: {
    flex: 2,
    backgroundColor: '#007bff',
    paddingVertical: hp(1.8),
    borderRadius: 12,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    gap: wp(2),
  },
  disabledButton: {
    backgroundColor: '#6c757d',
    opacity: 0.6,
  },
  payButtonText: {
    color: 'white',
    fontSize: hp(1.8),
    fontWeight: 'bold',
  },
});

export default DemoPaymentModal;